name: Build PGLite

on:
  workflow_dispatch:
    inputs:
      message:
        description: 'Build PGLite'

  push:
    branches: main

  pull_request:
    branches: main

jobs:
  build:
    name: Build and Test PGlite
    runs-on: ubuntu-22.04
    env:
        PGVERSION: 16.3
        SDK_VERSION: 3.1.62.0bi
        SDK_ARCHIVE: python3.12-wasm-sdk-Ubuntu-22.04.tar.lz4
        SDKROOT: /opt/python-wasm-sdk
        SYS_PYTHON: /usr/bin/python3
        PGROOT: /tmp/pglite
        DEBUG: false

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install python-wasm-sdk for emsdk/wasi+prebuilts
      working-directory: /
      run: |
        sudo apt-get install -y lz4 wget pv bash
        echo https://github.com/pygame-web/python-wasm-sdk/releases/download/$SDK_VERSION/$SDK_ARCHIVE
        curl -sL --retry 5 https://github.com/pygame-web/python-wasm-sdk/releases/download/$SDK_VERSION/$SDK_ARCHIVE | tar xvP --use-compress-program=lz4 | pv -p -l -s 24400 >/dev/null

    - name: Restore cached
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          postgres
          postgres-*
        key: build-cache-${{ hashFiles('cibuild/**', 'patches/**') }}

    - name: Build postgres WASM via emsdk
      if: steps.cache-restore.outputs.cache-hit != 'true'
      run: |
        bash ./cibuild.sh

    - name: Cached intermediate
      id: cache-intermediate
      uses: actions/cache/save@v4
      with:
        path: |
          postgres
          postgres-*
        key: ${{ steps.cache-restore.outputs.cache-primary-key }}

    - name: Build pgvector
      run: |
        bash ./cibuild.sh vector

    - name: Pack node distribution
      run: |
        bash ./cibuild.sh node

    - name: Link postgres WASM for web
      run: |
        bash ./cibuild.sh linkweb

    - uses: pnpm/action-setup@v4
      with:
        version: 8

    - name: Copy release for PGlite build
      run: |
        bash ./cibuild.sh pglite-prep

    - name: Build PGlite
      working-directory: ./packages/pglite
      run: |
        pnpm install
        pnpm run build
        pnpm pack

    - name: Build REPL for Example deployment
      working-directory: ./packages/repl
      run: |
        pnpm install
        pnpm run build

    - name: Build demo site
      run: |
        bash ./cibuild.sh demo-site

    - name: Upload Postgres to Github artifacts
      uses: actions/upload-artifact@v4
      with:
        name: postgres-wasm
        path: /tmp/sdk/postgres-*.tar.gz
        retention-days: 90

    - name: Upload PGlite Interim to Github artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pglite-interim-build-files
        path: ./packages/pglite/release/**
        retention-days: 90

    - name: Upload PGlite to Github artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pglite
        path: ./packages/pglite/electric-sql-pglite-*.tgz
        retention-days: 90

    - name: Upload Demos to Github artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pglite-demos
        path: /tmp/web/**
        retention-days: 90
  
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: '/tmp/web'
        production-branch: master
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy PR${{ github.event.pull_request.id }}: ${{ github.event.pull_request.title }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 1

    - name: Test pglite
      working-directory: ./packages/pglite
      run: |
        npx playwright install --with-deps
        npm run test
